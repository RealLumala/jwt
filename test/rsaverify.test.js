const RSAContract = artifacts.require("SolRsaVerify");
require('chai').should();

contract.skip("RSA verify", function([_, owner]) {

  before('deploy', async function () {
    this.instance = await RSAContract.new();
  })

  it('verifies mock signature with 1024 bytes key', async function () {
    const message = web3.utils.asciiToHex("hello world");
    const modulus = "0xB793F2F926170FAD768F8B1A5769A2243B4CDCAC4780194F59B39E1A2ABC3BB8EA42DB495D17BEC7F7072A11ED4FA510E75A7886A5DB6F71B7AFCA0090CA079889D18AF0669829ED29A8E21D0C09BD19CAAF2FE2CC8121BFC5687AC6698E3022F468A481426486CAD263BE1A119491E034A6E1AB78F19C066D4145A50F9ECFF7";
    const exponent= "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
    const signature = "0x57a0d6a185924d9d579b3ab319fe512331cb0bc6ef2da7d5285cbd06844f5c44662cae2e41ee5020893d6690e34b50a369a78250ae81ba6d708560535ef7cff0299f2ba070b096a9a76e84cf9c902b5e367b341ee166f5fc325dd08a3d971d96d528937f617a1eaf2250c56c4edca80c65970d54fe2492a19468bd32166b3c32";

    const result = await this.instance.pkcs1Sha256VerifyRaw(message, signature, exponent, modulus);
    result.toNumber().should.be.eq(0);
  });

  it('verifies mock signature with 2048 bytes key', async function () {
    const message = web3.utils.asciiToHex("hello world");
    const modulus = "0xC93E1BD98562158C2DFCB14F2151C49CFCFEFD5C69F3B19470ED23BCA39B069EAAF28DD346A9BB43C37F867FF64E93D0843FBF61B54EEBC7F02984FD7216B047F5FF10DE088DF08934C1273001AD5C5E6D078161036D80484E25461C8067F9C8CF63B8539F2D4B1A8B7125BB02D5DC8933D3F361B008F2C71EA62F56CA83085FFC2CAF37A49004D6A933DB67B1F6F7D70AECE6C4788305D45D8C04BFFDD1DE4C534583DE1D4419F9D8BD92BA1DF397AE6C942D922C6732CAABC5C8556F3271F6A07FD63AE9AE83756D18DED8DC161535AFEDE0CD7A88E8C68A6A0A09E36E6432A97B04E1CCC5B34AFC18946790E18A4371CE0690A6D4AEE5A1D27C131E67D577";
    const exponent= "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
    const signature = "0x78321c8c54df34965435f2c4cbd087097abb925d0615793aeb86c82a66ead651c0f7eef0ed52a4a36aa14ba1165c394368d74870480b12f8746f9b67a887ecc254f9741ccd579366ae8a531fc88095c42aaf2d678551c75c82700167304cc67870b429239d2af6bcc5b881b89a18d585218edad3baf2b53d712c10f1eadf4249af0909efdd7b7b927e139397838e22a8efd180831c5fdbbcf3bf10383de5877df5227976892a2aaf655361f9825483902a11afc9e962d67344268cd6e0997f6e9b04cab7644de104df6428a614f75f73278e193bc2721e4f1a21b26bbaeeb624d2634246ca6f9dd04fddb34c4f492803cbe122df47b4b54a133215eddd6b5ce6";

    const result = await this.instance.pkcs1Sha256VerifyRaw(message, signature, exponent, modulus);
    result.toNumber().should.be.eq(0);
  });
});

